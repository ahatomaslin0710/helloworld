name: IOS Production Build
on:
  push:
    branches:
      - main
# on:
#   workflow_dispatch:
#   release:
#     types: [published] # only run the workflow when a new release has been published
jobs:
  ios-build:
    name: IOS Production Build
    runs-on: macOS-latest
    defaults:
      run:
        working-directory: ios
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000
      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - name: Restore Pods cache
        uses: actions/cache@v2
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install Pods
        run: pod install --repo-update
      - name: Build IOS App
        uses: yukiarrr/ios-build-action@v1.4.0
        with:
          project-path: ios/helloworld.xcodeproj
          p12-base64: MIIMwQIBAzCCDIgGCSqGSIb3DQEHAaCCDHkEggx1MIIMcTCCBtcGCSqGSIb3DQEHBqCCBsgwggbEAgEAMIIGvQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQI4VvMDNFg2RcCAggAgIIGkMZVsho/d/6fWT/d96/vCzobJrqnR5HqBT6mRS1tYamm3hsH1fUzZWeD+kmnWmBnRhFBd5eLPkQP7OWuutfqbgLygsgLfu8yBU5ytY5OXOjMX8SGG3dloQDWpyv8X6xkHuvXgWsnvE0AZ5HGEVW22iGG/oLU+015r4m9XGTO4dlTpCphI4IjycYma4bp2UQvrzPv0HIRsh4U/tkja+EXTohwfsEMHnrR3pcpuOvLQjVlh7TnDrlUa9Ud5y+C7ZJhHvqPrd4BWlOgG5olPaHVIsLwf71ci2kOlMijxDiyFsBoh/rW4fM6cHX9cF4KbAe13ITvqsigbHVpDuc9tSM3e5HRT+8u0ZkVWk7T6m6Bfy5po9cdrj9u0G352+esB4Rwd+dI22MdQLTzAr7dXx/R6qHlZdbAhWbf9MhIFuLfhzXbaK/0zA7ChqfKPCW6Nr1A/H3d1PxgwhjioTrbC40vS+8b0uJ2hNzbXQxP8RPqzlljGBuj5YEPF/Ipdf+jYMzYAaEeqGPw6E4EZFU5rv5g5191fEk1ont2QLYIfuuVYRWbPal1D5vV2jVzOW57jQfU0VyIKciC4XmO080yDL0pa5nlP2UzehH3bL6tF9O6WzNVociNoIaAJLSDNwOEJpOYgA9PfoQ/0yG9xniCq35cHYz6FlejLe4Q43lJuMQ3GoNF9dN2Utq9jvkEg7wiFrAcD107RkJlp6qS4Bu/AwPrH8c1A8Dws3mXdBoXJGjhyAOWJQ8m69QMqlDYGiNms51uj48FgmpbVG90iwa0DpGZeWb4TZbxKes1EPjxe93RxPo/M+mBAkD1jgHKXEm52xAMhgMl7WfQ35jd8oxd5XdaUZJxZC8Nk3NeEveFBQ6TuN16yInuKqagyakEK+i4XC0S851pluvvXH8mfBuot3Q5zq4BSnb8lVm+oEqpP0fUM6Bt0qssoYUt0npZKabc9CoQ2qi//mwmFJcOUI0UUKFEzOuJ1iPLMOy25OFqk9s2kbqo2pMJyhERpr1qu8zKGcuSmgEJQknX9yh53Fe8fPwWoM8AzfuSb2Zkkaw7ZAhmUWjngyt0uX0Dx7j9r+RDUqVkDBTHreSZxCH5dW4Fhe34UYK2nFVof7GdTG52oVG9OgWwWyU4qkAkRou62tnYxyNH2NLcJiBZUxBB6GLIYszPqRBfhtSHrYOMc5pSB9XjW+Yf37rNigbU2UqtuQsIdXT8Vh0ZUuqxgTPep5D/GcXt+50BY02RdgytDMTNclJhutnCLgpNFi++tFHA9LPtu3Mrf37+J/BXcifThGbb/E8mARTo5sfuNZEs3EOMDAbKPIHktaNMPgECg4f0SYCBGOnSh63FKQ7TxkNvAlj4FwHIG0hfCGWeTTHveXSlpJSCK8xz0M1ywDGwUep/ygcPvgx93oOwUe8+dBRvyFW0fsDyou7HVhY2T8sF3Ex6yIZdy05VjOmktKqW+O+vbMsN0Pi68luvoB718WrASmY8gVwlkmmvhGX6f7H70FSdRB4Sf1KEOUY5bu+iqzBIt25S7sQF9Cfx5lAZR7WFFA+AB5JkRSa7t7pSq7aKdrFW/xQjrRUhqpZ1sTeurUC03VDsT11AYgroHAIY3RmcANnCj5FMg1VwS+SbGYiza84w+voyoyEOCYomaSsgleUM3l7CkQBGBlGOFQ9B4fmzDm0b9Po61seh/X1yKqBFncvomsPlOSY47TIgIxhuec88MzB0K68oJSLGB4i0dMR3rxE8Hg/Y2jeUV6cNpD2bPOGeKa56gTdDCMNunxof/18FeWnb1GQ3W7b/MIuvxL7rFfelKhST54UOxILbcuR5B0VAWwMfz4WrIQK4l+kMIupI8dbASYCU6I5pxWW6nUEQF6u01HKHbg27TSJDDUvg9pDx2Imw5UNNGPrDhkrVynBSE1lGu+zrJPIsvukzIxY50iw13yRkImsCdiZeaFAO4Zo1952mONJsIcTzZIDu6TQRHI6kH4t9/tqP2u8x4nbRom0F4Hkl31uA2KzdYm8USvNAGnKQzg0xKzlDwYiSpb8tI/GY2fCA0Dg3cLPIihlx7pdkTpRNrK5jNvUDgk+sIBYZn8449G8xLAzJ9+ncFlO6ghOyuY+9vMg+YthdhuPA7LtfcTMoZzPniYMEyzQe61wWO4T2pm8n378tgBDTGNbEBkAPiXZGY/5xrULW77kUQs/HvMpFv/M2RHZmyxvypqKMnA5CgAmnWu1L+Gpa1SvJ0TMuZ2PcmjCCBZIGCSqGSIb3DQEHAaCCBYMEggV/MIIFezCCBXcGCyqGSIb3DQEMCgECoIIE7jCCBOowHAYKKoZIhvcNAQwBAzAOBAhzffz4FWHn3gICCAAEggTIm/Exm0zCh0owXLEAAq7sNJlmDTPDHI85xlZm3tuxPYjXhpg8qcRBlWyTgYWGy/M1d/fzRIpXH8fFwBbJKVXN1MURRYD0uJ+bFAPv4H1Xro8LjCmk9AuOg6ElIaFEH5agvikD8Kt4bfCJ58y+g68FSr8DwRKx+kRyGneAiR7AWnc1KGaGGg86dfAZjp0cbRCLOavKcY0FPw6z/5kfi5fVLqSHnWD0s+MxSrcDkixzUQeG5Uat1ZjQa57YD/EKXDqUX71DJ827EBEqD7bXVpBt+EF64ZOz/qFt7khV66wxfyk6+pVECCMBmBzZPUS24Hc+xW/WcBokHv8xUNNHjkJr5ZGwFjM7MQacy32QmLpMBrVevMmGqtOS5wBhGvPP5xDeESPOGfzQuYyB6fkctJMudB3CVqkMlbQOhKwOdBbc2maem+PdsAG7GwkiKRtR2MGCcyo/I2bIqIJ4G1HMhA7e2BCbI+bOTlDAFQe2kAiFL/mkSgXX0m78XZeFkZoGVeMMKPueIwQXLU0AOnQsERcIXJQ4K/ysU3XBo1JCjXT2Wi2yz2mpk6r6GcYj/ZfWy+qg41jfZlDViwTDC9ovFfFo8IqUPnIZTHx/WE4g63naYG+P/RjbIeGViuz12+Oky7I5v6ZWdw95ls2NS17+YLJx6G+KTWcB8DYG0y7ivdkVqizxEUZ20rAJiFo2BAYxwat7zaittrh1l0XQKP90S27h1kthceuLeMx5fsChIVz3K3/bR547f5rp6kQePGtNUdYtgjx2ypLP2hshZFisnGECVwCKLS7DxU5n+zzdWLqg7IEH/rP+43P90BbnrXJp+S9zMCePT2vTYM0lTDHPm7GkRZEOppctipieueTzl1dAGV07HZk1sd1Yp86Lp77Az435Csxoyp4YVLtOIcLoOr8vW6J4FX9YvkeRUPZkbFnAzwGsiEQwzucuon7LdjYtX4yi3Hq5mLS96ZRgRfgNoowCt3LiB+Tvoh601SeXtbmNUya+a7hwPD5FdZyUc6coJBwjbEo8Tte2YMJj85rfxh5OOC7bf5hFPgIPAIIJoQ2IlA4FTmDPf4ENXMY/TSXd4ZnEJoDSMCFUqaKARh2UDDELThe/gfnHiAdqta77HO6ctSM2RR0n77e1uqN7YxoqxuUkWGXNJMxbDekaj8H3pxyk9x+nhLYelRDNMgTdw0AanXRmUsHQJzV7pYegtVONA5GA6D7xE0kvBKvxzibY7F16R493VXAGK7ecskPn5oSZA+/Q88NcyhlgV8WwpimbQ5vR+GuNXuu0xHrhwJz2lJQF/tGI4W/kBiUnDg7qzoOVobrsZ1ywPnQO+OAh2UIMVdEbbyFyZMwymltZrCeei20qKOvn6jbVim40o+QdZ79WxJdIXVOGjoV/1N4M67hM+kbhnd9FV/3/Xh43WZv9N1tzkcOL/Cd0MA/jAdbibpVBfrscvCpbAi2WcFdMAoNquLdQjOKkFcdOvpCBF1QRaiFw74a3ykvHsi7dMpctHyqSsvlKCbZqeiZadB1UjKEjsI4QXIut6WkPBiG5jTTN/6kXpA9LpOl/TT6upLL8iNdnOfibflqZQ6R5xORRgerVj66W0LnXFYL81+0hyJRYxEcUD3weJ+TRt+MJMXYwTwYJKoZIhvcNAQkUMUIeQABBAHAAcABsAGUAIABEAGkAcwB0AHIAaQBiAHUAdABpAG8AbgA6ACAAQwBoAGkAaAAgAFkAdQAgAEMAaABlAG4wIwYJKoZIhvcNAQkVMRYEFPkd302rE0JCtPuxwFEhqTrMM4DPMDAwITAJBgUrDgMCGgUABBRcfaFPimVxpP/9hlWuCkJcuv6juQQIMYWW0lgzNiACAQE=
          mobileprovision-base64: 
          code-signing-identity: 'iPhone Distribution'
          team-id: W6K7F9HNX5
          certificate-password: xup6jo3fup6
          workspace-path: ios/helloworld.xcworkspace
          scheme: helloworld
      # - name: 'Upload app to TestFlight'
      #   uses: apple-actions/upload-testflight-build@v1
      #   with:
      #     app-path: 'output.ipa'
      #     issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
      #     api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
      #     api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}